#!/usr/bin/perl

# Begin-Doc
# Name: pull-host
# Description: pulls host content
# End-Doc

use lib "/local/umrperl/libs";

use Getopt::Long;
use File::Path;

my $debug;
my $help;
my $partial;
my $res = GetOptions(
    "debug+"    => \$debug,
    "partial|p" => \$partial,
    "help|h"    => \$help,
);

my $host = shift @ARGV;

if ( !$res || $help || !$host ) {
    print "Usage: $0 host [--debug] [--partial] [--help]\n";
    exit(1);
}

if ( $host !~ /\.srv\.mst\.edu/ && gethostbyname( $host . ".srv.mst.edu" ) ) {
    $host .= ".srv.mst.edu";
}

#
# Check to see if krb5 authenticated
#
my $saw_krb = 0;
open( my $in, "-|" ) || exec("klist");
while ( defined( my $line = <$in> ) ) {
    chomp($line);
    if ( $line =~ /Default principal: (.*\@.*)/io ) {
        $saw_krb = $1;
    }
}
close($in);
if ( !$saw_krb ) {
    print "Must kinit first in order to have ssh access to targets.\n";
    exit;
}
print "Authenticated as: $saw_krb\n";

#
# First determine OS of target system as previously synced
#

#
# Run the sync
#
my @partial = ("-W");
if ($partial) {
    @partial = ();
}

my $base = "/data/hosts/$host";
if ( !-e $base ) {
    mkpath( $base, 0, 0700 ) || die;
}

my @dirs = (
    { path => "/etc" },
    { path => "/home", exclude => ["local/messages.debug"] },
    { path => "/local", exclude => [ "logs/access_log.*", "logs/error_log.*" ] },
    { path => "/usr/share/authsrv" },
    { path => "/data" },
    { path => "/var/log" },
    { path => "/root", exclude => [".ccache"] },
);

foreach my $dref (@dirs) {
    my $dir = $dref->{path};

    my $tname = $dir;
    $tname =~ s|^/||go;
    $tname =~ s|/$||go;
    $tname =~ s|/|-|go;

    print "Syncing $host:$dir\n";

    my @cmd = ( "rsync", "-avH", @partial, "--force", "--delete", "--progress" );

    if ( $dref->{exclude} ) {
        push( @cmd, "--delete-excluded" );
        foreach my $pat ( @{ $dref->{exclude} } ) {
            push( @cmd, "--exclude" => $pat );
        }
    }

    push( @cmd, "root\@$host:$dir/" => "$base/$tname/" );
    print "+ ", join( " ", @cmd ), "\n";
    system(@cmd);
}

my %cmds = (
    "df -k"             => "df-k",
    "vgdisplay -v"      => "vgdisplay",
    "lvs"               => "lvs",
    "cat /proc/cpuinfo" => "cpuinfo",
    "cat /proc/meminfo" => "meminfo",
    "ifconfig -a"       => "ifconfig",
    "ps -ef"            => "ps-ef",
    "ps auxwww"         => "ps-auxwww",
);

foreach my $cmd ( sort( keys(%cmds) ) ) {
    my $fname = $cmds{$cmd};

    system("ssh root\@$host $cmd > $base/info-$fname.txt");
}