#!/usr/bin/perl

# Begin-Doc
# Name: restore-to-host
# Description: restores host content
# End-Doc

use strict;
use lib "/local/umrperl/libs";

use Getopt::Long;
use File::Path;

my $debug;
my $help;
my $partial;
my $force;
my $res = GetOptions(
    "debug+"    => \$debug,
    "force+"    => \$force,
    "partial|p" => \$partial,
    "help|h"    => \$help,
);

my $host = shift @ARGV;

if ( !$res || $help || !$host ) {
    print "Usage: $0 host [--debug] [--partial] [--help]\n";
    exit(1);
}

if ( $host !~ /\.srv\.mst\.edu/ && gethostbyname( $host . ".srv.mst.edu" ) ) {
    $host .= ".srv.mst.edu";
}

unlink("/root/.ssh/known_hosts");

#
# Check to see if krb5 authenticated
#
my $saw_krb = 0;
open( my $in, "-|" ) || exec("klist");
while ( defined( my $line = <$in> ) ) {
    chomp($line);
    if ( $line =~ /Default principal: (.*\@.*)/io ) {
        $saw_krb = $1;
    }
}
close($in);
if ( !$saw_krb ) {
    print "Must kinit first in order to have ssh access to targets.\n";
    exit;
}
print "Authenticated as: $saw_krb\n";

#
# Make sure, this is destructive
#
$| = 1;
if ( !$force ) {
    print "Overwrite contents of $host? Are you sure (yes/no)? ";
    chomp( my $ans = <STDIN> );
    if ( lc($ans) ne "yes" ) {
        print "Exiting!\n";
        exit(1);
    }
}

#
# First determine OS of target system as previously synced
#

sub mysystem {
    my @cmd = @_;
    print "+ ", join( " ", @cmd ), "\n";
    system(@cmd);
}

my $base = "/data/hosts/$host";
my @rsync = ( "rsync", "-avW", "--force", "--delete", "--progress" );

&mysystem( @rsync, "$base/local/", "root\@$host:/local/" );

&mysystem( @rsync, "$base/usr-share-authsrv/", "root\@$host:/usr/share/authsrv/" );

&mysystem( @rsync, "--exclude=root", "$base/var-spool-cron/", "root\@$host:/var/spool/cron/" );

# Check for tftp
open( my $in, "$base/etc/xinetd.d/tftp" );
my $data = join( "", <$in> );
close($in);

if ( $data =~ /^\s*disable\s*=\s*no/gmo ) {
    print "Found tftp, copying.\n";
    &mysystem( "scp", "-p", "$base/etc/xinetd.d/tftp", "root\@$host:/etc/xinetd.d/" );
    &mysystem( "ssh", "root\@$host", "service", "xinetd", "restart" );
}

# If we have a bonding config
if ( -e "$base/etc/modprobe.d/bonding.conf" ) {
    &mysystem( "scp", "-p", "$base/etc/modprobe.d/bonding.conf", "root\@$host:/etc/modprobe.d/" );
}

# Copy rc-start and rc-stop
&mysystem(
    @rsync,
    "--exclude=rc.000.kernel-config",
    "$base/home/local/adm/rc-start/",
    "root\@$host:/home/local/adm/rc-start/"
);
&mysystem( @rsync, "$base/home/local/adm/rc-start/", "root\@$host:/home/local/adm/rc-start/" );

# If we had apache, update the setup
foreach my $dir ( "/local/apache", "/local/weblogs", "/local/umrperl", "/local/mysql" ) {
    if ( -e "$base$dir" ) {
        &mysystem( "ssh", "root\@$host", "svn", "upgrade", $dir );
    }
}

# If we had apache, update the setup
if ( -e "$base/local/apache" ) {
    &mysystem( "ssh", "root\@$host", "/local/apache/setup-local-dirs" );
}

# If we had mysql, update the setup
if ( -e "$base/local/mysql" ) {
    &mysystem( "ssh", "root\@$host", "/local/mysql/setup-local-dirs" );
    &mysystem( "ssh", "root\@$host", "/local/mysql/run-upgrade" );
}

# If we had jdk, update the setup
if ( -e "$base/local/jdk" ) {
    &mysystem( "ssh", "root\@$host", "/local/jdk/setup-local-dirs", "7-64" );
}

# If we have keepalived, update
if ( -e "$base/etc/keepalived/keepalived.conf" ) {
    &mysystem( "scp", "$base/etc/keepalived/keepalived.conf", "root\@$host:/etc/keepalived/keepalived.conf" );
    &mysystem( "ssh", "root\@$host", "systemctl", "enable", "keepalived.service" );
}

# Check if any autofs usage
open( my $in, "$base/etc/auto.master" );
my $data = join( "", <$in> );
close($in);

if ( $data =~ m|^/auto| ) {
    print "Found autofs usage, copying auto.master and auto.map, enabling nfs client.\n";
    &mysystem( "scp", "-p", "$base/etc/auto.master", "root\@$host:/etc/" );
    &mysystem( "scp", "-p", "$base/etc/auto.map",    "root\@$host:/etc/" );

    foreach my $svc ( "rpcbind", "nfs-idmap", "nfs-lock", "autofs" ) {
        &mysystem( "ssh", "root\@$host", "systemctl", "enable", "$svc.service" );
        &mysystem( "ssh", "root\@$host", "systemctl", "start",  "$svc.service" );
    }
}

# Check if any exports
open( my $in, "$base/etc/exports" );
my $data = join( "", <$in> );
close($in);

if ( $data =~ m|^/| ) {
    print "Found exports, copying and enabling nfs server.\n";
    &mysystem( "scp", "-p", "$base/etc/exports", "root\@$host:/etc/" );

    foreach my $svc ( "rpcbind", "nfs-secure-server" ) {
        &mysystem( "ssh", "root\@$host", "systemctl", "enable", "$svc.service" );
        &mysystem( "ssh", "root\@$host", "systemctl", "start",  "$svc.service" );
    }
}

# SSH host keys
unlink("/root/.ssh/known_hosts");
my @files = glob("$base/etc/ssh/*key*");
&mysystem( "scp", @files, "root\@$host:/etc/ssh/" );
