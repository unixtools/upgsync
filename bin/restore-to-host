#!/usr/bin/perl

# Begin-Doc
# Name: restore-to-host
# Description: restores host content
# End-Doc

use strict;
use lib "/local/perllib/libs";
use lib "/local/mstperl/libs";

use Getopt::Long;
use File::Path;

my $debug;
my $help;
my $partial;
my $force;
my $res = GetOptions(
    "debug+"    => \$debug,
    "force+"    => \$force,
    "partial|p" => \$partial,
    "help|h"    => \$help,
);

my $host = shift @ARGV;

if ( !$res || $help || !$host ) {
    print "Usage: $0 host [--debug] [--partial] [--help]\n";
    exit(1);
}

my ($full) = gethostbyname($host);
if ( $full && $full ne $host ) {
    print "Overriding hostname with: $full\n";
    $host = $full;
}

unlink("/root/.ssh/known_hosts");

#
# Check to see if ssh agent socket
#
if ( !$ENV{SSH_AUTH_SOCK} ) {
    die "Must have SSH agent socket.\n";
}

#
# Make sure, this is destructive
#
$| = 1;
if ( !$force ) {
    print "Before proceeding with this, be sure that you have already created\n";
    print "and mounted any /local or /data filesystems, and that you have\n";
    print "enlarged root fs as needed.\n\n";

    print "Overwrite contents of $host? Are you sure (yes/no)? ";
    chomp( my $ans = <STDIN> );
    if ( lc($ans) ne "yes" ) {
        print "Exiting!\n";
        exit(1);
    }
}

#
# Rotate through previous sync logs
#
my $logbase  = "/data/hosts/$host/upgsync-logs/restore";
my $logcount = 5;
unlink( $logbase . "." . $logcount );
for my $i ( reverse( 1 .. $logcount - 1 ) ) {
    if ( -e $logbase . "." . $i ) {
        my $nextlog = $logbase . "." . ( $i + 1 );
        rename( $logbase . "." . $i, $nextlog );
    }
}
rename( $logbase, $logbase . ".1" );

open( STDOUT, "|tee $logbase" );
open( STDERR, ">&STDOUT" );

#
# First determine OS of target system as previously synced
#

sub mysystem {
    my @cmd = @_;
    print "+ ", join( " ", @cmd ), "\n";
    system(@cmd);
}

my $base  = "/data/hosts/$host";
my @rsync = ( "rsync", "-avHW", "--force", "--delete", "--progress" );

# SSH host keys
my @files = glob("$base/etc/ssh/*key*");
&mysystem( "scp",  @files,         "root\@$host:/etc/ssh/" );
&mysystem( @rsync, "$base/local/", "root\@$host:/local/" );
&mysystem( "ssh", "root\@$host", "service", "sshd", "restart" );
unlink("/root/.ssh/known_hosts");

sleep(2);

if ( -d "$base/data" ) {
    &mysystem( @rsync, "$base/data/", "root\@$host:/data/" );
}

&mysystem( @rsync, "$base/root/.ssh/",   "root\@$host:/root/.ssh/" );
&mysystem( @rsync, "$base/root/.my.cnf", "root\@$host:/root/.my.cnf" );

&mysystem( @rsync, "$base/usr-share-authsrv/", "root\@$host:/usr/share/authsrv/" );

opendir( my $cron, "$base/var-spool-cron/crontabs" );
while ( my $file = readdir($cron) ) {
    next if ( $file eq "." || $file eq ".." || $file eq "root" );
    &mysystem( "scp", "-p", "$base/var-spool-cron/crontabs/$file", "root\@$host:/var/spool/cron/crontabs/" );
    &mysystem( "ssh", "root\@$host", "chown", "$file:crontab", "/var/spool/cron/crontabs/$file" );
}

# Copy rc-start and rc-stop
&mysystem(
    @rsync,
    "--exclude=rc.000.kernel-config",
    "$base/home/local/adm/rc-start/",
    "root\@$host:/home/local/adm/rc-start/"
);
&mysystem( @rsync, "$base/home/local/adm/rc-stop/", "root\@$host:/home/local/adm/rc-stop/" );

# If we had apache, update the setup
if ( -e "$base/local/apache" ) {
    print "Setting up apache.\n";
    &mysystem( "ssh", "root\@$host", "git -C /local/apache pull'");
    &mysystem( "ssh", "root\@$host", "/local/apache/setup-local-dirs" );
}

# If we had memcache, update the setup
if ( -e "$base/local/memcache" ) {
    print "Setting up memcached.\n";
    &mysystem( "ssh", "root\@$host", "git -C /local/memcache pull'");
    &mysystem( "ssh", "root\@$host", "/local/memcache/setup-local-dirs" );
}

# If we had jdk, update the setup
if ( -e "$base/local/jdk" ) {
    print "Setting up JDK.\n";
    &mysystem( "ssh", "root\@$host", "git -C /local/jdk pull'");
    &mysystem( "ssh", "root\@$host", "/local/jdk/setup-local-dirs", "7-64" );
}

# If we have keepalived, update
if ( -e "$base/etc/keepalived/keepalived.conf" ) {
    print "Restoring keepalived.\n";
    &mysystem( "ssh", "root\@$host", "apt-get", "-y", "install", "keepalived" );
    &mysystem( "scp", "$base/etc/keepalived/keepalived.conf", "root\@$host:/etc/keepalived/keepalived.conf" );
    &mysystem( "ssh", "root\@$host", "systemctl", "enable", "keepalived.service" );
}

# If we have eth1 config, massage and copy
# Networking needs complete overhaul to translate to netplan on ub20
print "**** NEED TO TRANSLATE ANY CUSTOM NETWORKING!!!\n";

# Check if any autofs usage
open( my $in, "$base/etc/auto.master" );
my $data = join( "", <$in> );
close($in);

if ( -e "$base/etc/keepalived/keepalived.conf" ) {
    &mysystem( "scp", "-p", "$base/etc/keepalived/keepalived.conf", "root\@$host:/etc/keepalived/" );
    &mysystem( "ssh", "root\@$host", "update-rc.d", "keepalived", "enable" );
}

if ( $data =~ m|^/auto| ) {
    print "Found autofs usage, copying auto.master and auto.map, enabling nfs client.\n";
    &mysystem( "scp", "-p", "$base/etc/auto.master", "root\@$host:/etc/" );
    &mysystem( "scp", "-p", "$base/etc/auto.map",    "root\@$host:/etc/" );

    foreach my $svc ( "rpcbind", "nfs-idmap", "nfs-lock", "autofs" ) {
        &mysystem( "ssh", "root\@$host", "systemctl", "enable", "$svc.service" );
        &mysystem( "ssh", "root\@$host", "systemctl", "start",  "$svc.service" );
    }
}

# Check if any exports
open( my $in, "$base/etc/exports" );
my $data = join( "", <$in> );
close($in);

if ( $data =~ m|^/|sgmo ) {
    print "Found exports, copying and enabling nfs server.\n";
    &mysystem( "scp", "-p", "$base/etc/exports", "root\@$host:/etc/" );

    foreach my $svc ( "rpcbind", "nfs-kernel-server" ) {
        &mysystem( "ssh", "root\@$host", "systemctl", "enable", "$svc.service" );
        &mysystem( "ssh", "root\@$host", "systemctl", "start",  "$svc.service" );
    }
}

# Updating passwd config/cron/etc
&mysystem(
    "ssh",          "root\@rdist-p1", "/local/rdist/bin/manual-rdist", $host,
    "passwd-merge", "cron-config",    "kernel-config",                 "network-config",
    "local-perl"
);

# Cleanup local user dirs
&mysystem( "ssh", "root\@$host", "rmdir", "--ignore-fail-on-non-empty", "/local/*" );

# If we had mysql, update the setup
if ( -e "$base/local/mysql" ) {
    &mysystem( "ssh", "root\@$host", "git -C /local/mysql pull");
    if ( -e "$base/local/mysql/cluster" ) {
        print "MySQL is a cluster deployment, not auto-upgrading, run setup and upgrade manually.\n";
    }
    else {
        print "Setting up mysql, you will need to start mysql on the host or reboot manually.\n";
        &mysystem( "ssh", "root\@$host", "/local/mysql/setup-local-dirs" );
    }
    &mysystem( "ssh", "root\@$host", "/local/mysql/setup-cron" );
}

#
# Determine default interface, hardcoding to ens192 for now
#
my %ignore_iface;
$ignore_iface{lo} = 1;

open( my $in, "ssh root\@$host ip route show default|" );
while ( defined( my $line = <$in> ) ) {
    if ( $line =~ /.*dev\s+(.*?)\s+/ ) {
        $ignore_iface{$1} = 1;
    }
}
close($in);

open( my $in, "</data/hosts/$host/etc/network/interfaces" );
my $cur = undef;
while ( defined( my $line = <$in> ) ) {
    if ( $line =~ /^iface\s+(.*?)\s+inet\s+(.*)\s*$/ ) {
        if ($cur) {
            &dump_plan($cur);
        }
        $cur          = undef;
        $cur->{iface} = $1;
        $cur->{mode}  = $2;
    }
    elsif ( $line =~ /^\s*address\s+([0-9\.]+?)\s*$/o ) {
        $cur->{addr} = $1;
    }
    elsif ( $line =~ /^\s*netmask\s+([0-9\.]+?)\s*$/o ) {
        my $mask = $1;
        my $bits = 32;
        if (0) { }
        elsif ( $mask eq "255.255.255.224" ) { $bits = 30; }
        elsif ( $mask eq "255.255.255.240" ) { $bits = 28; }
        elsif ( $mask eq "255.255.255.224" ) { $bits = 27; }
        elsif ( $mask eq "255.255.255.192" ) { $bits = 26; }
        elsif ( $mask eq "255.255.255.128" ) { $bits = 25; }
        elsif ( $mask eq "255.255.255.0" )   { $bits = 24; }
        elsif ( $mask eq "255.255.254.0" )   { $bits = 23; }
        elsif ( $mask eq "255.255.252.0" )   { $bits = 22; }
        elsif ( $mask eq "255.255.248.0" )   { $bits = 21; }
        $cur->{bits} = $bits;
    }
    elsif ( $line =~ m|post-up.*route.*\s+([0-9\.]+/[0-9\.]+) via ([0-9\.]+)\s*$|o ) {
        push( @{ $cur->{routes} }, { network => $1, gw => $2 } );
    }
}
if ($cur) {
    &dump_plan($cur);
    $cur = undef;
}

sub dump_plan {
    my $cur   = shift;
    my $iface = $cur->{iface};
    if ( $ignore_iface{$iface} ) {
        print "Ignoring config for ($iface).\n";
        return;
    }

	if ( $iface =~ /:/ ) {
		print "******* WARNING ******** Need manual config for alias interface $iface\n";
		return;
	}

    my $fname   = "/etc/netplan/99-extra-${iface}.yaml";
    my $tmpfile = "/tmp/np-$$-${host}-${iface}.yaml";

    print "\nGenerating for $fname in $tmpfile\n";
    open( my $out, ">$tmpfile" );
    print $out "network:\n";
    print $out "  version: 2\n";
    print $out "  renderer: networkd\n";
    print $out "  ethernets:\n";
    print $out "    $iface:\n";

    if ( $cur->{mode} eq "dhcp" ) {
        print $out "      dhcp4: yes\n";
    }
    else {
        print $out "      dhcp4: no\n";
    }
    if ( $cur->{addr} ) {
        print $out "      addresses: [", $cur->{addr}, "/", $cur->{bits}, "]\n";
    }
    if ( $cur->{routes} ) {
        print $out "      routes:\n";
        foreach my $rr ( @{ $cur->{routes} } ) {
            print $out "        - to: ",  $rr->{network}, "\n";
            print $out "          via: ", $rr->{gw},      "\n";
        }
    }
    print "\n";
    close($out);

    system( "cat", $tmpfile );
    &mysystem( "scp", "-p", $tmpfile, "root\@$host:$fname");
    &mysystem( "ssh", "root\@$host", "chown", "root:root", $fname);
    unlink($tmpfile);
}


print "\n\nDone.\n";
